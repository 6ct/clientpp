import { writeFile } from "fs/promises";

const headerOut = new URL("../src/IPCMessages.h", import.meta.url);
const tsOut = new URL("./src/IPCMessages.ts", import.meta.url);

const enums = {
  LogType: ["info", "error", "warn", "debug"],
  IM: [
    // client sends:
    "rpc_update",
    "rpc_clear",
    "save_config",
    "shell_open",
    "fullscreen",
    "update_meta",
    "revert_meta",
    "reload_config",
    "browse_file",
    "mousedown",
    "mouseup",
    "mousemove",
    "mousewheel",
    "pointer",
    "open_devtools",
    "log",
    "relaunch_webview",
    "close_window",
    "reload_window",
    "seek_game",
    "toggle_fullscreen",
    "account_list",
    "account_password",
    "account_set",
    "account_remove",
    "account_set_password",
    "account_regen",
    // client receives:
    "update_menu",
    "get_ping_region",
  ],
};

// C++ header:
{
  let header =
    "#pragma once\n" +
    "// This file was automatically generated by ipc-messages.mjs. Do not modify this file manually!\n";

  for (const e in enums) {
    header += `\n`;
    header += `namespace ${e} {\n`;
    // we avoid using the better enum class { because we cast the types so much
    for (const i in enums[e])
      header += `  constexpr const unsigned short ${enums[e][i]} = ${i};\n`;
    header += `};\n`;
  }

  await writeFile(headerOut, header);
}

// Typescript:
{
  let script =
    "// This file was automatically generated by ipc-messages.mjs. Do not modify this file manually!\n";

  for (const e in enums) {
    script += `\n`;
    script += `export const ${e} = {\n`;
    // we avoid using the better enum class { because we cast the types so much
    for (const i in enums[e]) script += `  ${enums[e][i]}: ${i},\n`;
    script += `};\n`;
  }

  await writeFile(tsOut, script);
}
